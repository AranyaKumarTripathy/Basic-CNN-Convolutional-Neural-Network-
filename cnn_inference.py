# -*- coding: utf-8 -*-
"""CNN_Inference.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bi-PJuT0OQtbT4YA6SdkM9hWZOqcIHSq
"""

import torch
import numpy as np
import matplotlib.pyplot as plt

import torchvision
import torchvision.transforms as transforms
trainset = torchvision.datasets.CIFAR10(root = "./data", train = True, download = True, transform = transforms.ToTensor())

classes = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

trainloader = torch.utils.data.DataLoader(trainset, batch_size=4, shuffle=True)

dataiter = iter(trainloader) 
images, labels = dataiter.next()

print(images.shape)

print(images[0].shape)
print(labels[0].item())

"""#Visualise data"""

img  = images[0]
print(type(img))

np_img = img.numpy()
print(np_img.shape)

np_img = np.transpose(np_img, (1,2,0))
print(np_img.shape)

plt.figure(figsize = (1,1))
plt.imshow(np_img)
plt.show()

def imshow(img):
  np_img = img.numpy()
  plt.imshow(np.transpose(np_img,(1,2,0)))
  plt.show()

imshow(torchvision.utils.make_grid(images))
print('  '.join(classes[labels[j]] for j in range(4)))

"""# Single Convolutional Layer"""

import torch.nn as nn

class FirstCNN(nn.Module):
  def __init__(self):
    super(FirstCNN, self).__init__()
    self.Conv1 = nn.Conv2d(3,16,3, padding=(1,1),stride=(2,2)) # padding = (1,1), strides = (3,3)

  def forward(self,x):
    x = self.Conv1(x)
    return x

net = FirstCNN()

out = net(images)
print(out.shape)

for param in net.parameters():
  print(param.shape)

out1 = out[0,0,:,:].detach().numpy()
print(out1.shape)

plt.imshow(out1)
plt.show()

"""#Deep Convolutional Network"""

class FirstCNN_v2(nn.Module):
  def __init__(self):
    super(FirstCNN_v2, self).__init__()
    self.model = nn.Sequential(
        nn.Conv2d(3,8,3),     #(N, 3, 32, 32) ->  (N, 8, 30, 30)
        nn.Conv2d(8,16,3)     #(N, 8, 30, 30) ->  (N, 16, 28, 28)
    )
    
  def forward(self,x):
    x = self.model(x)
    return x

net2 = FirstCNN_v2()
out = net2(images)
out.shape

plt.imshow(out[0,0,:,:].detach().numpy())

class FirstCNN_v3(nn.Module):
  def __init__(self):
    super(FirstCNN_v3,self).__init__()
    self.model = nn.Sequential(
       nn.Conv2d(3,6,5),            #(N, 3, 32, 32) -> (N, 6, 28, 28)
       nn.AvgPool2d(2, stride=2),   #(N, 6, 28, 28) -> (N, 6, 14, 14)
       nn.Conv2d(6,16,5),           #(N, 6, 14, 14) -> (N, 16, 10, 10)
       nn.AvgPool2d(2, stride=2)    #(N, 16, 14, 14) -> (N, 16, 5, 5)
    )

  def forward(self, x):
    x = self.model(x)
    return x

net3 = FirstCNN_v3()
out = net3(images)
out.shape

plt.imshow(out[0,0,:,:].detach().numpy())

